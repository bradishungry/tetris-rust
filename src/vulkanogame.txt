use std::sync::Arc;
use std::collections::hash_map::HashMap;
use std::time::{Duration, Instant};

use winit;
use winit::WindowEvent::*;

use vulkano::buffer::{BufferUsage, CpuAccessibleBuffer};
use vulkano::command_buffer::{AutoCommandBufferBuilder, CommandBuffer, DynamicState};
use vulkano::device::{Device, DeviceExtensions, Features};
use vulkano::format::{ClearValue, Format};
use vulkano::framebuffer::{Framebuffer, Subpass};
use vulkano::image::{Dimensions, StorageImage};
use vulkano::instance::{Instance, InstanceExtensions, PhysicalDevice};
use vulkano::pipeline::{ComputePipeline, GraphicsPipeline, viewport::Viewport};
use vulkano::sync::GpuFuture;

use vulkano_win::VkSurfaceBuild;

use image::{ImageBuffer, Rgba};

//pub mod graphics;
//pub mod units;

pub fn game_loop() {

    mod vs {
        vulkano_shaders::shader!{
            ty: "vertex",
            path: "assets/Shaders/basic.glslv"
        }
    }

    mod fs {
        vulkano_shaders::shader!{
            ty: "fragment",
            path: "assets/Shaders/basic.glslf"
        }
    }

    const FPS: u32 = 60;

    let instance = {
        let extensions = vulkano_win::required_extensions();
        Instance::new(None, &extensions, None).expect("failed to create Vulkan instance")
    };

    //winit
    let mut events_loop = winit::EventsLoop::new();

    let window = winit::WindowBuilder::new()
        .with_title("Your faithful window")
        .with_dimensions(winit::dpi::LogicalSize { width: 800.0, height: 600.0 })
        .build(&events_loop)
        .unwrap();

    //vulkan
    let vertex1 = Vertex { position: [-0.5, -0.5] };
    let vertex2 = Vertex { position: [ 0.0,  0.5] };
    let vertex3 = Vertex { position: [ 0.5, -0.25] };

    let physical = PhysicalDevice::enumerate(&instance).next().expect("no device avaiable");
    let queue_family = physical.queue_families().find(|&q| q.supports_graphics()).expect("No Queue Family");
    let (device, mut queues) = {
        Device::new(physical, &Features::none(), &DeviceExtensions::none(),
                    [(queue_family, 0.5)].iter().cloned()).expect("No Device Found")
    };
    let queue = queues.next().unwrap();

    let image = StorageImage::new(device.clone(), Dimensions::Dim2d { width: 1024, height: 1024 },
                                  Format::R8G8B8A8Unorm, Some(queue.family())).unwrap();

    let buf = CpuAccessibleBuffer::from_iter(device.clone(), BufferUsage::all(),
                                             (0 .. 1024 * 1024 * 4).map(|_| 0u8))
                                             .expect("failed to create buffer");
    #[derive(Copy, Clone)]
    struct Vertex {
        position: [f32; 2],
    }
    vulkano::impl_vertex!(Vertex, position);

    let vertex_buffer = CpuAccessibleBuffer::from_iter(device.clone(), BufferUsage::all(),
                                                   vec![vertex1, vertex2, vertex3].into_iter()).unwrap();

    let render_pass = Arc::new(vulkano::single_pass_renderpass!(device.clone(),
        attachments: {
            color: {
                load: Clear,
                store: Store,
                format: Format::R8G8B8A8Unorm,
                samples: 1,
            }
        },
        pass: {
            color: [color],
            depth_stencil: {}
        }
    ).unwrap());

    let framebuffer = Arc::new(Framebuffer::start(render_pass.clone())
                               .add(image.clone()).unwrap()
                               .build().unwrap());

    let vs = vs::Shader::load(device.clone()).expect("Failed to create shader");
    let fs = fs::Shader::load(device.clone()).expect("Failed to create fragment shader");

    let pipeline = Arc::new(GraphicsPipeline::start()
                 // Defines what kind of vertex input is expected.
                 .vertex_input_single_buffer::<Vertex>()
                 // The vertex shader.
                 .vertex_shader(vs.main_entry_point(), ())
                 // Defines the viewport (explanations below).
                 .viewports_dynamic_scissors_irrelevant(1)
                 // The fragment shader.
                 .fragment_shader(fs.main_entry_point(), ())
                 // This graphics pipeline object concerns the first pass of the render pass.
                 .render_pass(Subpass::from(render_pass.clone(), 0).unwrap())
                 // Now that everything is specified, we call `build`.
                 .build(device.clone())
                 .unwrap());

    let dynamic_state = DynamicState {
        viewports: Some(vec![Viewport {
            origin: [0.0, 0.0],
            dimensions: [1024.0, 1024.0],
            depth_range: 0.0 .. 1.0,
        }]),
        .. DynamicState::none()
    };

    let command_buffer = AutoCommandBufferBuilder::primary_one_time_submit(device.clone(), queue.family()).unwrap()
        .begin_render_pass(framebuffer.clone(), false, vec![[0.0, 0.0, 1.0, 1.0].into()])
        .unwrap()

        .draw(pipeline.clone(), &dynamic_state, vertex_buffer.clone(), (), ())
        .unwrap()

        .end_render_pass()
        .unwrap()

        .copy_image_to_buffer(image.clone(), buf.clone())
        .unwrap()

        .build()
        .unwrap();

    let finished = command_buffer.execute(queue.clone()).unwrap();
    finished.then_signal_fence_and_flush().unwrap()
        .wait(None).unwrap();

    let buffer_content = buf.read().unwrap();
    let image = ImageBuffer::<Rgba<u8>, _>::from_raw(1024, 1024, &buffer_content[..]).unwrap();
    image.save("triangle.png").unwrap();

    /*let spirv = include_bytes!("../../assets/gen/shaders/basic.glslv.spv");
      let vertex_shader_module = {
      unsafe { ShaderModule::new(device.clone(), spirv.as_binary_u8()) }.unwrap()
      };*/

    let mut starting_time: Instant = Instant::now();
    let mut pos = 40;

    let mut i = 1;
    //graphics::update(&mut canvas, &mut texcache, i as u8, pos);    
    events_loop.run_forever(|event| {

        match event {
            winit::Event::WindowEvent { event, .. } => match event {                
                winit::WindowEvent::KeyboardInput {
                    input:
                        winit::KeyboardInput {
                            virtual_keycode: Some(winit::VirtualKeyCode::Escape),
                            ..
                        },
                        ..
                } |
                CloseRequested => { return winit::ControlFlow::Break; },
                _ => (),
            },
            _ => (),
        }

        let loop_time: Instant = Instant::now();
        i = (i + 1) % 255;

        let ending_time: Duration = Instant::now().duration_since(loop_time);
        let delta_time: Duration = Duration::from_millis(250);

        if starting_time.elapsed() > delta_time {
            starting_time = Instant::now();
            if pos <= 466 {pos = pos + 26;}
            //graphics::update(&mut canvas, &mut texcache, i as u8, pos);
        }

        match (Duration::from_millis(1000) / FPS).checked_sub(ending_time) {
            Some(i) => ::std::thread::sleep(i),
            _ => (),
        };

        winit::ControlFlow::Continue

    });
}
